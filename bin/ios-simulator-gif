#!/bin/bash
#
# Records iOS simulator screen and saves as a gif to simulator.gif
# A new file name may be passed as argument

PKG_VERSION="${ENV_VERSION}"
RED="\033[1;31m"
GREEN="\033[1;32m"
CLEAR="\033[0m"

##############
###  MAIN  ###
##############
main() {
  parse_args "$@"
  check_booted
  record
  convert_gif
}

#####################
### Check Booted  ###
#####################
check_booted() {
  VERSION=""
  COUNT=0
  MENU=()
  UUIDS=()
  UUID="booted"

  # Parse simulators
  while read -r SIM; do
    NAME=$(echo "$SIM" | gsed '/Booted/!{q1}; {s/^\(.*\) (.*(Booted)/\1/}')
    
    if [ $? -eq 1 ]; then
      VERSION=$(echo "$SIM" | gsed '/-- /!{q1}; {s/-- \(.*\) --/\1/}')
      continue
    fi

    UUID=$(echo "$SIM" | gsed '/Booted/!{q1}; {s/^.* (\(.*\)) .*$/\1/}')
    UUIDS+=($UUID)

    MENU+=("[$COUNT]: $NAME ($VERSION)")
    ((COUNT++))
  done < <(xcrun simctl list | grep 'Booted\|-- ')

  if [[ $COUNT -eq 0 ]]; then
    echo "No devices are booted"
    exit 404
  elif [[ $COUNT -gt 1 ]]; then
    echo -e "There are more than one simulator booted:\n"
    printf '%s\n' "${MENU[@]}"

    res=-1
    while (( res < 0 || res >= $COUNT )); do
      printf "\\nPlease, select an option: [0-%d]: " $(expr $COUNT - 1)
      read -n1 res
    done

    UUID=${UUIDS[$res]}
    echo -e "\n"
  fi
}

##################
###   Record   ###
##################
record() {
  echo -e "${RED}Recording...${CLEAR}\n\n[Press any key to stop recording]"

  xcrun simctl io ${UUID} recordVideo /tmp/simulator.mov &
  PID=$!

  read -n1
  kill -2 $PID
}

#######################
###   Convert GIF   ###
#######################
convert_gif() {
  echo -e "Converting and saving to ${FILE_NAME}\n"
  WATERMARK_CMD="drawtext=text='ios-simulator-gif':x=10:y=H-th-10:fontsize=40:fontcolor=white:shadowcolor=black:shadowx=5:shadowy=5"
  ffmpeg -i /tmp/simulator.mov -vf "${HIDE_WATERMARK-$WATERMARK_CMD,}${VIDEOFILTER}" -r $RATE -f $FORMAT -y $FILE_NAME $EXTRA &> /tmp/ffmpeg.log

  if [[ $? -eq 0 ]]; then
    echo -e "${GREEN}Gif saved to ${FILE_NAME}${CLEAR}"
  else
    cat /tmp/ffmpeg.log
  fi
}


########################
###   ARGS PARSING   ###
########################
parse_args() {
  FILE_NAME=()
  while [[ $# -gt 0 ]]
  do
  key="$1"

  case $key in
      -r|--rate)
      RATE="$2"
      shift 2
      ;;
      -f|--format)
      FORMAT="$2"
      shift 2
      ;;
      -vf)
      VIDEOFILTER="$2"
      shift 2
      ;;
      -h|--help)
      display_help
      shift
      ;;
      -v|--version)
      echo "${PKG_VERSION}"
      exit 0
      ;;
      --no-watermark)
      HIDE_WATERMARK=''
      shift 1
      ;;
      --)
      EXTRA="${@:2}"
      shift
      ;;
      *)    # unknown option
      FILE_NAME+=("$1") # save it in an array for later
      shift
      ;;
  esac
  done
  set -- "${FILE_NAME[@]}"

  FILE_NAME=${FILE_NAME-simulator.gif}
  RATE=${RATE-6}
  VIDEOFILTER=${VIDEOFILTER-'scale=320:-1'}
  FORMAT=${FORMAT-gif}
}

#########################
# The command line help #
#########################
display_help() {
  CMD=$(basename -- $0)

  echo "Usage: $CMD [options] {out_file} {-- [ffmpeg options]}" >&2
  echo
  echo "  out_file                    The output file name (default: simulator.gif)"
  echo "  ffmpeg options              Pass everything after '--' to ffmpeg as arguments"
  echo
  echo "  -r, --rate                  Framerate of the output (default: 6)"
  echo "  -f, --format                Output format (default: gif)"
  echo "  -vf, --video-filter         Video filter for ffmpeg (default: scale=320:-1)"
  echo "  --no-watermark              Remove watermark from gif"
  echo "  -h, --help                  Outputs this help message"
  echo "  -v, --version               Outputs the version number"
  echo
  exit 0
}

main "$@"